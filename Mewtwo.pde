import ddf.minim.*;

Minim minim;
AudioPlayer player;

float t = 0;
float scale = 0.75;
color transparent = color(0, 0, 0, 0);
color purple = color(153, 122, 151);
color blue = color(31, 28, 255);
color white = color(221, 217, 227);
ArrayList<PVector> points = new ArrayList<PVector>();
ArrayList<Integer> lineColor = new ArrayList<Integer>();
ArrayList<Integer> strokes = new ArrayList<Integer>();
boolean running = true;

void setup()
{
  fullScreen(P2D);
  //size(800, 800, P2D);
  background(0);
  noFill();
  smooth();
  frameRate(21);
  
  minim = new Minim(this);
  player = minim.loadFile("Pokemon Theme.mp3");
  player.loop();
}

void keyPressed() {
  if(key == ' ')
    running = !running;
  if(key == 'r')
    reset();
}

void reset()
{
  frameCount = -1;
  t = 0;
  lineColor.clear();
  strokes.clear();
  points.clear();
  minim.stop();
  minim = new Minim(this);
  player.loop();
  scale = 0.75;
}

float updateT(float T)
{
  T += 0.002;
  if(T >= 166.58) { //END
    lineColor.add(color(0,0,0));
    strokes.add(1);
    return 63 * PI;
  }
  if(T >= 163.37 && T < 166.58) { //HAND
    lineColor.add(white);
    strokes.add(1);
    return T + 0.01;
  }
  if(T >= 153.90 && T < 163.37) { //SKIP
    lineColor.add(white);
    strokes.add(1);
    return 163.37;
  }
  if(T >= 150.80 && T < 153.90) { //ARM
    lineColor.add(white);
    strokes.add(2);
    return T + 0.008;
  }
  if(T >= 141.42 && T < 150.80) { //SKIP
    lineColor.add(white);
    strokes.add(1);
    return 150.80;
  }
  if(T >= 138.52 && T < 141.42) { //BELLY
    lineColor.add(purple);
    strokes.add(3);
    return T + 0.002;
  }
  if(T >= 128.67 && T < 138.52) { //SKIP
    lineColor.add(white);
    strokes.add(1);
    return 138.52;
  }
  if(T >= 126.24 && T < 128.67) { //CONNECTOR
    lineColor.add(white);
    strokes.add(2);
    return T + 0.004;
  }
  if(T >= 116.26 && T < 126.24) { //SKIP
    lineColor.add(white);
    strokes.add(1);
    return 126.24;
  }
  if(T >= 113.12 && T < 116.26) { //CHEST
    lineColor.add(white);
    strokes.add(1);
    return T + 0.004;
  }
  if(T >= 103.00 && T < 113.12) { //SKIP
    lineColor.add(white);
    strokes.add(1);
    return 113.12;
  }
  if(T >= 101.50 && T < 103.00) { //MOUTH
    lineColor.add(white);
    strokes.add(2);
    return T + 0.002;
  }
  if(T >= 91 && T < 101.50) { //SKIP
    lineColor.add(white);
    strokes.add(1);
    return 101.50;
  }
  if(T >= 88.10 && T < 91.00) { //EYEBROW 1
    lineColor.add(white);
    strokes.add(2);
    return T + 0.04;
  }
  if(T >= 81.00 && T < 88.10) { //SKIP
    lineColor.add(white);
    strokes.add(1);
    return 88.10;
  }
  if(T >= 75.40 && T < 81.00) { //EYEBROW 2
    lineColor.add(white);
    strokes.add(2);
    return T + 0.04;
  }
  if(T >= 66.00 && T < 75.40) { //SKIP
    lineColor.add(white);
    strokes.add(1);
    return 75.40;
  }
  if(T >= 62.84 && T < 66.00) { //TAIL
    lineColor.add(purple);
    strokes.add(3);
    return T + 0.004;
  }
  if(T >= 56.54 && T < 62.84) { //SKIP
    lineColor.add(white);
    strokes.add(1);
    return 62.84;
  }
  if(T >= 54.24 && T < 56.54) { //EYEBALL 2
    lineColor.add(blue);
    strokes.add(2);
    return T + 0.01;
  }
  if(T >= 43.95 && T < 54.24) { //SKIP
    lineColor.add(white);
    strokes.add(1);
    return 54.24;
  }
  if(T >= 37.95 && T < 43.95) { //EYEBALL 1
    lineColor.add(blue);
    strokes.add(2);
    return T + 0.01;
  }
  if(T >= 31.39 && T < 37.95) { //SKIP
    lineColor.add(white);
    strokes.add(1);
    return 37.95 ;
  }
  if(T >= 25.15 && T < 31.39) { //EYE 2
    lineColor.add(white);
    strokes.add(2);
    return T + 0.015;
  }
  if(T >= 18.8 && T < 25.15) { //SKIP
    lineColor.add(white);
    strokes.add(1);
    return 25.15;
  }
  if(T >= 12.59 && T < 18.8) { //EYE 1
    lineColor.add(white);
    strokes.add(2);
    return T + 0.01;
  }
  if(T >= 6.283 && T < 12.59) { //SKIP
    lineColor.add(white);
    strokes.add(1);
    return 12.59;
  }
  else { //BODY
    strokes.add(4);
    lineColor.add(white);
  }
  return T;
}

void draw()
{ 
  if(frameCount < 10) return;
  if(t <= 63*PI && running)
  {
    for(int z = 0; z<5; z++) {
      t = updateT(t);
      points.add(new PVector(x(t), -y(t)));
      //print(t+"\n");
    }
  } else {
    scale += 0.001;
  }
  
  translate(width/2, height/2);
  background(0);
  
  beginShape();
  for(int i = 0; i < points.size(); i++)
  {
    strokeWeight(strokes.get(i));
    stroke(lineColor.get(i));
    point(points.get(i).x * scale, points.get(i).y * scale);
  }
  endShape();
}

float sgn(float x)
{
  if(x == 0) return 0;
  else if(x > 0) return 1;
  else return -1;
}

float theta(float x)
{
  if(x == 0) return 0.5;
  else if(x > 0) return 1;
  else return 0;
}

float SIN(float x)
{
  return sin(x);
}

float x(float t)
{
  return (((133.0/16 *sin(t + 11.0/7) + 201.0/28 *sin(2*t + 11.0/7) + 11.0/29 *sin(3*t + 113.0/24) + 118.0/63 *
  sin(4*t + 11.0/7) + 13.0/32 *sin(5*t + 96.0/61) - 2351.0/14)*theta(55*PI -t)*theta(t - 51*PI) + (1381.0/49 *
  sin(t + 63.0/40) + 95.0/8 *sin(2*t + 30.0/19) + 1.0/3 *sin(3*t + 147.0/32) + 131.0/36 *sin(4*t + 19.0/12) + 4606.0/41)
  *theta(51*PI -t)*theta(t - 47*PI) + (-2.0/11 *sin(39.0/34 - 12*t) - 102.0/25 *sin(57.0/37 - 8*t) - 1132.0/27 *
  sin(39.0/25 - 4*t) - 1367.0/29 *sin(36.0/23 -t) + 1457.0/30 *sin(2*t + 30.0/19) + 228.0/25 *sin(3*t + 49.0/31) 
  + 56.0/39 *sin(5*t + 49.0/30) + 47.0/37 *sin(6*t + 48.0/29) + 259.0/25 *sin(7*t + 30.0/19) + 93.0/13 *sin(9*t + 47.0/30) 
  + 28.0/5 *sin(10*t + 19.0/12) + 234.0/31 *sin(11*t + 30.0/19) + 1465.0/22)*theta(47*PI -t)*theta(t - 43*PI) + 
  (-16.0/21 *sin(39.0/25 - 8*t) - 34.0/7 *sin(36.0/23 - 7*t) - 469.0/138 *sin(36.0/23 - 6*t) - 337.0/37 *sin(58.0/37 - 3*t)
  + 178.0/13 *sin(t + 11.0/7) + 131.0/23 *sin(2*t + 52.0/33) + 39.0/16 *sin(4*t + 68.0/43) + 23.0/26 *sin(5*t + 47.0/10) 
  + 37.0/31 *sin(9*t + 113.0/24) + 1.0/69 *sin(10*t + 35.0/8) + 13.0/35 *sin(11*t + 103.0/22) + 33.0/50 *sin(12*t + 27.0/17)
  - 534.0/11)*theta(43*PI -t)*theta(t - 39*PI) + (-69.0/38 *sin(25.0/16 - 10*t) - 101.0/45 *sin(20.0/13 - 8*t) 
  - 25.0/34 *sin(46.0/33 - 7*t) - 308.0/41 *sin(95.0/61 - 4*t) - 428.0/27 *sin(14.0/9 - 3*t) - 1435.0/52 *sin(80.0/51 - 2*t)
  + 1055.0/28 *sin(t + 11.0/7) + 143.0/29 *sin(5*t + 49.0/31) + 194.0/47 *sin(6*t + 80.0/17) + 3.0/26 *sin(9*t + 95.0/21) +
  2.0/9 *sin(11*t + 59.0/46) + 29.0/42 *sin(12*t + 80.0/17) + 614.0/21)*theta(39*PI -t)*theta(t - 35*PI) + (-33.0/37 *
  sin(25.0/16 - 9*t) - 167.0/59 *sin(73.0/47 - 3*t) - 113.0/38 *sin(25.0/16 - 2*t) + 217.0/30 *sin(t + 85.0/54) + 38.0/61 *
  sin(4*t + 29.0/18) + 513.0/140 *sin(5*t + 43.0/27) + 4.0/7 *sin(6*t + 51.0/31) + 21.0/43 *sin(7*t + 13.0/8) + 25.0/28 *
  sin(8*t + 46.0/29) + 921.0/25)*theta(35*PI -t)*theta(t - 31*PI) + (-569.0/38 *sin(11.0/7 -t) + 111.0/11 *
  sin(2*t + 11.0/7) + 110.0/61 *sin(3*t + 36.0/23) + 13.0/4 *sin(4*t + 80.0/51) + 3.0/17 *sin(5*t + 48.0/31) + 1555.0/31)*
  theta(31*PI -t)*theta(t - 27*PI) + (-4.0/17 *sin(43.0/28 - 7*t) - 36.0/25 *sin(14.0/9 - 6*t) - 74.0/147 *
  sin(71.0/46 - 5*t) - 92.0/39 *sin(25.0/16 - 4*t) - 21.0/16 *sin(59.0/38 - 3*t) - 67.0/8 *sin(47.0/30 - 2*t) + 646.0/41 *
  sin(t + 11.0/7) + 68.0/7)*theta(27*PI -t)*theta(t - 23*PI) + (-19.0/12 *sin(53.0/34 - 11*t) - 739.0/49 *
  sin(53.0/34 - 5*t) - 626.0/37 *sin(25.0/16 -t) + 851.0/22 *sin(2*t + 41.0/26) + 944.0/55 *sin(3*t + 23.0/15) + 3889.0/40 
  *sin(4*t + 64.0/41) + 61.0/15 *sin(6*t + 67.0/39) + 23.0/17 *sin(7*t + 19.0/17) + 471.0/44 *sin(8*t + 59.0/38) + 
  100.0/33 *sin(9*t + 85.0/57) + 112.0/27 *sin(10*t + 63.0/40) + 87.0/14 *sin(12*t + 77.0/51) + 25.0/21 *sin(13*t + 162.0/35)
  + 38.0/17 *sin(14*t + 36.0/23) + 73.0/25 *sin(15*t + 37.0/25) + 5.0/6 *sin(16*t + 39.0/22) + 82.0/35 *sin(17*t + 136.0/29) 
  + 69.0/25 *sin(18*t + 65.0/42) - 30315.0/106)*theta(23*PI -t)*theta(t - 19*PI) + (-15.0/29 *sin(1.0/179 - 11*t) 
  - 41.0/28 *sin(39.0/40 - 3*t) - 110.0/17 *sin(9.0/28 -t) + 63.0/23 *sin(2*t + 144.0/53) + 64.0/37 *sin(4*t + 32.0/19) 
  + 35.0/19 *sin(5*t + 34.0/37) + 33.0/31 *sin(6*t + 113.0/32) + 31.0/63 *sin(7*t + 22.0/25) + 49.0/73 *sin(8*t + 157.0/44) 
  + 11.0/19 *sin(9*t + 14.0/47) + 19.0/27 *sin(10*t + 212.0/71) + 3.0/11 *sin(12*t + 94.0/35) - 268.0/25)*theta(19*PI -t)
  *theta(t - 15*PI) + (-4.0/37 *sin(32.0/35 - 11*t) - 7.0/3 *sin(9.0/32 - 5*t) - 43.0/49 *sin(33.0/26 - 2*t) - 57.0/14 *
  sin(7.0/15 -t) + 32.0/29 *sin(3*t + 47.0/12) + 24.0/23 *sin(4*t + 14.0/19) + 17.0/12 *sin(6*t + 49.0/44) + 33.0/58 
  *sin(7*t + 111.0/32) + 7.0/19 *sin(8*t + 9.0/20) + 4.0/31 *sin(9*t + 11.0/3) + 1.0/60 *sin(10*t + 108.0/31) + 7.0/40 
  *sin(12*t + 41.0/19) + 822.0/11)*theta(15*PI -t)*theta(t - 11*PI) + (-1.0/38 *sin(63.0/55 - 11*t) + 567.0/29 *
  sin(t + 87.0/44) + 136.0/35 *sin(2*t + 54.0/19) + 91.0/31 *sin(3*t + 18.0/13) + 64.0/57 *sin(4*t + 69.0/16) + 44.0/39 *
  sin(5*t + 289.0/124) + 23.0/35 *sin(6*t + 79.0/21) + 10.0/23 *sin(7*t + 221.0/111) + 2.0/23 *sin(8*t + 63.0/17) + 9.0/55 *
  sin(9*t + 175.0/51) + 5.0/13 *sin(10*t + 57.0/17) + 1.0/15 *sin(12*t + 23.0/5) - 1614.0/103)*theta(11*PI -t)*
  theta(t - 7*PI) + (-5.0/31 *sin(43.0/34 - 9*t) - 11.0/10 *sin(19.0/20 - 5*t) - 84.0/23 *sin(14.0/41 - 2*t) - 1281.0/53 *
  sin(11.0/9 -t) + 53.0/23 *sin(3*t + 111.0/25) + 41.0/32 *sin(4*t + 24.0/25) + 6.0/53 *sin(6*t + 77.0/24) + 5.0/22 *
  sin(7*t + 183.0/41) + 7.0/24 *sin(8*t + 67.0/133) + 4.0/15 *sin(10*t + 17.0/29) + 5.0/32 *sin(11*t + 327.0/86) + 7.0/26 *
  sin(12*t + 33.0/40) + 1872.0/23)*theta(7*PI -t)*theta(t - 3*PI) + (-3.0/11 *sin(12.0/13 - 79*t) - 41.0/83 *
  sin(69.0/53 - 72*t) - 13.0/66 *sin(40.0/27 - 69*t) - 13.0/77 *sin(23.0/28 - 66*t) - 2.0/9 *sin(7.0/15 - 63*t) - 7.0/27 *
  sin(11.0/12 - 60*t) - 11.0/37 *sin(45.0/29 - 54*t) - 3.0/2 *sin(36.0/23 - 53*t) - 51.0/38 *sin(5.0/33 - 51*t) - 49.0/32 *
  sin(4.0/33 - 33*t) - 96.0/23 *sin(41.0/46 - 31*t) - 73.0/38 *sin(14.0/19 - 30*t) - 279.0/46 *sin(5.0/18 - 27*t) - 39.0/25 *
  sin(31.0/41 - 18*t) - 74.0/21 *sin(29.0/25 - 17*t) - 81.0/28 *sin(23.0/18 - 15*t) - 584.0/27 *sin(37.0/52 - 5*t) 
  - 597.0/11 *sin(15.0/11 - 3*t) + 5482.0/31 *sin(t + 51.0/25) + 501.0/7 *sin(2*t + 53.0/26) + 355.0/22 *
  sin(4*t + 116.0/37) + 73.0/19 *sin(6*t + 17.0/37) + 10.0/3 *sin(7*t + 103.0/23) + 311.0/18 *sin(8*t + 31.0/22) + 809.0/25 *
  sin(9*t + 52.0/19) + 682.0/37 *sin(10*t + 55.0/29) + 255.0/14 *sin(11*t + 5.0/38) + 98.0/9 *sin(12*t + 39.0/19) + 190.0/21 *
  sin(13*t + 30.0/7) + 563.0/40 *sin(14*t + 45.0/14) + 305.0/33 *sin(16*t + 429.0/92) + 81.0/22 *sin(19*t + 21.0/34) + 65.0/11 
  *sin(20*t + 32.0/19) + 139.0/33 *sin(21*t + 48.0/13) + 137.0/27 *sin(22*t + 332.0/79) + 22.0/15 *sin(23*t + 35.0/18) 
  + 73.0/61 *sin(24*t + 64.0/17) + 51.0/16 *sin(25*t + 53.0/12) + 219.0/25 *sin(26*t + 53.0/40) + 14.0/9 *sin(28*t + 141.0/53) 
  + 74.0/9 *sin(29*t + 71.0/32) + 15.0/31 *sin(32*t + 38.0/23) + 36.0/23 *sin(34*t + 51.0/16) + 68.0/35 *sin(35*t + 226.0/55) 
  + 22.0/13 *sin(36*t + 81.0/23) + 23.0/26 *sin(37*t + 2.0/33) + 51.0/61 *sin(38*t + 40.0/29) + 11.0/14 *sin(39*t + 35.0/9) 
  + 67.0/50 *sin(40*t + 120.0/29) + 31.0/14 *sin(41*t + 7.0/8) + 9.0/25 *sin(42*t + 175.0/43) + 118.0/71 *sin(43*t + 67.0/22) 
  + 11.0/26 *sin(44*t + 37.0/53) + 23.0/13 *sin(45*t + 103.0/26) + 59.0/31 *sin(46*t + 28.0/83) + 27.0/47 *sin(47*t + 24.0/95) 
  + 5.0/7 *sin(48*t + 48.0/25) + 7.0/16 *sin(49*t + 60.0/31) + 35.0/41 *sin(50*t + 23.0/10) + 15.0/16 *sin(52*t + 93.0/26) 
  + 8.0/23 *sin(55*t + 56.0/19) + 12.0/25 *sin(56*t + 67.0/20) + 20.0/41 *sin(57*t + 87.0/61) + 10.0/19 *sin(58*t + 31.0/8) 
  + 9.0/22 *sin(59*t + 72.0/25) + 3.0/8 *sin(61*t + 66.0/17) + 11.0/26 *sin(62*t + 3.0/40) + 17.0/39 *sin(64*t + 3.0/16) 
  + 7.0/31 *sin(65*t + 113.0/32) + 11.0/32 *sin(67*t + 7.0/8) + 5.0/9 *sin(68*t + 94.0/29) + 7.0/20 *sin(70*t + 7.0/36) + 5.0/21 
  *sin(71*t + 13.0/15) + 8.0/33 *sin(73*t + 43.0/16) + 17.0/69 *sin(74*t + 121.0/47) + 10.0/31 *sin(75*t + 59.0/17) + 13.0/43 *
  sin(76*t + 55.0/38) + 5.0/22 *sin(77*t + 137.0/34) + 7.0/38 *sin(78*t + 7.0/11) + 3.0/23 *sin(80*t + 28.0/31) - 323.0/14)
  *theta(3*PI -t)*theta(t +PI))*theta(sqrt(sgn(sin(t/2)))));
}

float y(float t)
{
  return (((-7.0/24 *sin(39.0/25 - 5*t) - 31.0/24 *sin(91.0/58 - 3*t) - 1140.0/53 *sin(11.0/7 -t) + 141.0/65 *
  sin(2*t + 69.0/44) + 3.0/29 *sin(4*t + 8.0/5) + 3861.0/28)*theta(55*PI -t)*theta(t - 51*PI) + (-170.0/27 *
  sin(25.0/16 - 3*t) - 1361.0/21 *sin(58.0/37 -t) + 168.0/41 *sin(2*t + 81.0/52) + 1.0/2 *sin(4*t + 29.0/19) + 727.0/42)
  *theta(51*PI -t)*theta(t - 47*PI) + (-103.0/42 *sin(53.0/34 - 12*t) - 149.0/41 *sin(14.0/9 - 10*t) - 69.0/11 *
  sin(25.0/16 - 8*t) - 61.0/32 *sin(38.0/25 - 4*t) - 422.0/27 *sin(31.0/20 - 3*t) + 1050.0/43 *sin(t + 36.0/23) + 
  1359.0/11 *sin(2*t + 52.0/33) + 122.0/25 *sin(5*t + 207.0/44) + 45.0/16 *sin(6*t + 47.0/10) + 81.0/23 *sin(7*t + 
  221.0/47) + 36.0/17 *sin(9*t + 108.0/23) + 7.0/50 *sin(11*t + 194.0/47) - 5056.0/33)*theta(47*PI -t)*theta(t - 43*PI)
  + (-4.0/43 *sin(376.0/251 - 12*t) - 1.0/5 *sin(28.0/19 - 10*t) - 79.0/41 *sin(36.0/23 - 4*t) - 127.0/27 *
  sin(36.0/23 - 3*t) + 206.0/49 *sin(t + 63.0/40) + 634.0/21 *sin(2*t + 63.0/40) + 6.0/37 *sin(5*t + 238.0/159) + 43.0/38 *
  sin(6*t + 41.0/26) + 1.0/13 *sin(7*t + 285.0/61) + 17.0/41 *sin(8*t + 31.0/20) + 2.0/11 *sin(9*t + 58.0/37) + 5.0/18 *
  sin(11*t + 30.0/19) + 8143.0/38)*theta(43*PI -t)*theta(t - 39*PI) + (-32.0/39 *sin(39.0/25 - 10*t) - 33.0/82 *
  sin(37.0/24 - 9*t) - 16.0/35 *sin(55.0/37 - 4*t) + 15.0/2 *sin(t + 29.0/18) + 2795.0/51 *sin(2*t + 11.0/7) + 610.0/111 
  *sin(3*t + 75.0/16) + 33.0/67 *sin(5*t + 16.0/11) + 25.0/27 *sin(6*t + 61.0/37) + 1.0/19 *sin(7*t + 30.0/13) + 27.0/32 *
  sin(8*t + 19.0/12) + 17.0/26 *sin(11*t + 107.0/68) + 33.0/47 *sin(12*t + 25.0/16) + 3769.0/32)*theta(39*PI -t)
  *theta(t - 35*PI) + (-63.0/40 *sin(31.0/20 - 5*t) - 44.0/19 *sin(37.0/24 - 4*t) - 21.0/8 *sin(59.0/38 - 3*t) - 32.0/65 *
  sin(17.0/11 - 2*t) + 44.0/25 *sin(t + 52.0/33) + 26.0/27 *sin(6*t + 96.0/61) + 26.0/37 *sin(7*t + 47.0/10) + 43.0/38 
  *sin(8*t + 43.0/27) + 5.0/22 *sin(9*t + 411.0/88) + 6115.0/28)*theta(35*PI -t)*theta(t - 31*PI) + (-16.0/21 *
  sin(69.0/44 - 3*t) + 714.0/31 *sin(t + 212.0/45) + 37.0/20 *sin(2*t + 113.0/24) + 3.0/13 *sin(4*t + 25.0/16) + 1.0/134 *
  sin(5*t + 67.0/39) + 9338.0/33)*theta(31*PI -t)*theta(t - 27*PI) + (-69.0/34 *sin(47.0/30 - 3*t) - 113.0/57 *
  sin(39.0/25 - 2*t) - 759.0/29 *sin(69.0/44 -t) + 44.0/35 *sin(4*t + 41.0/26) + 9.0/40 *sin(5*t + 30.0/19) + 22.0/41 *
  sin(6*t + 43.0/27) + 12.0/23 *sin(7*t + 49.0/31) + 8274.0/29)*theta(27*PI -t)*theta(t - 23*PI) + (-11.0/31 *
  sin(7.0/5 - 18*t) - 67.0/31 *sin(43.0/28 - 13*t) - 226.0/7 *sin(113.0/72 -t) + 5985.0/44 *sin(2*t + 193.0/41) + 
  1533.0/58 *sin(3*t + 169.0/36) + 1849.0/56 *sin(4*t + 47.0/10) + 626.0/27 *sin(5*t + 45.0/29) + 352.0/13 
  *sin(6*t + 37.0/24) + 564.0/19 *sin(7*t + 131.0/28) + 101.0/38 *sin(8*t + 37.0/8) + 385.0/39 *sin(9*t + 3.0/2) + 
  143.0/50 *sin(10*t + 329.0/72) + 121.0/32 *sin(11*t + 145.0/31) + 247.0/47 *sin(12*t + 37.0/24) + 61.0/31 *
  sin(14*t + 134.0/29) + 50.0/41 *sin(15*t + 43.0/28) + 3.0/14 *sin(16*t + 23.0/37) + 2.0/15 *sin(17*t + 186.0/49) - 
  1245.0/29)*theta(23*PI -t)*theta(t - 19*PI) + (-2.0/17 *sin(3.0/14 - 8*t) - 7.0/19 *sin(33.0/26 - 6*t) - 64.0/19 *
  sin(1.0/4 - 3*t) + 121.0/23 *sin(t + 3.0/25) + 117.0/35 *sin(2*t + 137.0/37) + 117.0/29 *sin(4*t + 22.0/7) + 42.0/13 *
  sin(5*t + 1055.0/352) + 19.0/26 *sin(7*t + 185.0/43) + 9.0/28 *sin(9*t + 126.0/41) + 4.0/37 *sin(10*t + 88.0/35) + 
  3.0/28 *sin(11*t + 163.0/68) + 1.0/9 *sin(12*t + 51.0/19) + 6677.0/24)*theta(19*PI -t)*theta(t - 15*PI) + (-11.0/31 *
  sin(22.0/29 - 11*t) - 3.0/25 *sin(21.0/31 - 9*t) - 49.0/122 *sin(109.0/87 - 7*t) - 133.0/71 *sin(15.0/13 - 3*t) + 107.0/53
  *sin(t + 25.0/27) + 133.0/132 *sin(2*t + 49.0/30) + 131.0/56 *sin(4*t + 89.0/44) + 142.0/43 *sin(5*t + 5.0/29) + 15.0/17 *
  sin(6*t + 17.0/12) + 17.0/43 *sin(8*t + 54.0/13) + 31.0/72 *sin(10*t + 111.0/35) + 17.0/38 *sin(12*t + 397.0/119) + 
  13801.0/50)*theta(15*PI -t)*theta(t - 11*PI) + (-1.0/7 *sin(32.0/35 - 11*t) - 10.0/43 *sin(43.0/34 - 9*t) - 10.0/33 *
  sin(3.0/8 - 7*t) - 11.0/24 *sin(7.0/20 - 4*t) - 46.0/25 *sin(32.0/33 - 3*t) + 752.0/35 *sin(t + 248.0/55) + 39.0/19 
  *sin(2*t + 52.0/23) + 13.0/37 *sin(5*t + 97.0/24) + 5.0/28 *sin(6*t + 67.0/32) + 29.0/72 *sin(8*t + 21.0/22) + 7.0/25 *
  sin(10*t + 46.0/21) + 3.0/14 *sin(12*t + 17.0/15) + 11477.0/41)*theta(11*PI -t)*theta(t - 7*PI) + (-1.0/5 *
  sin(44.0/43 - 11*t) - 1.0/13 *sin(29.0/25 - 10*t) - 5.0/16 *sin(52.0/37 - 9*t) - 15.0/31 *sin(35.0/39 - 7*t) - 197.0/69 *
  sin(14.0/11 - 3*t) + 233.0/11 *sin(t + 251.0/57) + 40.0/19 *sin(2*t + 19.0/7) + 9.0/29 *sin(4*t + 69.0/19) + 15.0/19 *
  sin(5*t + 175.0/41) + 12.0/25 *sin(6*t + 77.0/115) + 1.0/43 *sin(8*t + 23.0/30) + 1.0/9 *sin(12*t + 207.0/50) + 3671.0/13)*
  theta(7*PI -t)*theta(t - 3*PI) + (-8.0/31 *sin(47.0/41 - 79*t) - 7.0/15 *sin(66.0/131 - 78*t) - 11.0/45 *sin(21.0/40 
  - 77*t) - 1.0/4 *sin(2.0/23 - 74*t) - 9.0/23 *sin(41.0/28 - 72*t) - 17.0/42 *sin(3.0/34 - 70*t) - 53.0/74 *sin(6.0/7 - 68*t)
  - 23.0/29 *sin(17.0/13 - 58*t) - 12.0/49 *sin(5.0/21 - 57*t) - 10.0/27 *sin(3.0/2 - 55*t) - 43.0/34 *sin(52.0/37 - 52*t) 
  - 19.0/28 *sin(5.0/13 - 49*t) - 54.0/35 *sin(59.0/44 - 46*t) - 20.0/13 *sin(55.0/38 - 42*t) - 62.0/37 *sin(17.0/41 - 38*t) 
  - 443.0/148 *sin(16.0/11 - 30*t) - 17.0/3 *sin(27.0/19 - 26*t) - 119.0/19 *sin(33.0/31 - 23*t) - 1447.0/193 *sin(5.0/26 - 
  18*t) - 44.0/5 *sin(5.0/24 - 14*t) - 120.0/41 *sin(12.0/11 - 13*t) - 457.0/43 *sin(44.0/31 - 10*t) - 243.0/85 *sin(9.0/53 - 
  9*t) - 2998.0/23 *sin(12.0/37 - 3*t) + 22027.0/56 *sin(t + 1.0/16) + 2073.0/35 *sin(2*t + 11.0/41) + 821.0/27 *sin(4*t + 
  45.0/28) + 1282.0/33 *sin(5*t + 536.0/119) + 779.0/54 *sin(6*t + 57.0/16) + 749.0/34 *sin(7*t + 7.0/4) + 401.0/38 *sin(8*t 
  + 44.0/31) + 418.0/53 *sin(11*t + 63.0/32) + 69.0/16 *sin(12*t + 137.0/38) + 49.0/26 *sin(15*t + 41.0/61) + 538.0/95 *
  sin(16*t + 45.0/14) + 595.0/61 *sin(17*t + 119.0/38) + 355.0/69 *sin(19*t + 63.0/20) + 118.0/33 *sin(20*t + 49.0/44) + 
  127.0/28 *sin(21*t + 51.0/61) + 153.0/44 *sin(22*t + 55.0/27) + 130.0/31 *sin(24*t + 32.0/11) + 135.0/31 *sin(25*t + 
  31.0/15) + 73.0/45 *sin(27*t + 81.0/20) + 37.0/23 *sin(28*t + 36.0/73) + 119.0/32 *sin(29*t + 27.0/23) + 70.0/39 *
  sin(31*t + 140.0/41) + 149.0/64 *sin(32*t + 34.0/27) + 67.0/30 *sin(33*t + 114.0/25) + 50.0/31 *sin(34*t + 23.0/22) + 
  28.0/27 *sin(35*t + 83.0/21) + 328.0/101 *sin(36*t + 142.0/33) + 31.0/15 *sin(37*t + 25.0/29) + 29.0/19 *sin(39*t + 
  117.0/46) + 53.0/29 *sin(40*t + 82.0/49) + 15.0/34 *sin(41*t + 7.0/57) + 39.0/44 *sin(43*t + 26.0/33) + 28.0/27 *
  sin(44*t + 86.0/35) + 205.0/63 *sin(45*t + 115.0/33) + 39.0/20 *sin(47*t + 10.0/13) + 19.0/28 *sin(48*t + 37.0/27) + 
  32.0/29 *sin(50*t + 10.0/9) + 26.0/33 *sin(51*t + 59.0/15) + 50.0/41 *sin(53*t + 65.0/32) + 1.0/10 *
  sin(54*t + 15.0/29) + 13.0/35 *sin(56*t + 60.0/41) + 4.0/17 *sin(59*t + 17.0/9) + 7.0/25 *sin(60*t + 657.0/329) + 12.0/47 *
  sin(61*t + 5.0/22) + 5.0/19 *sin(62*t + 151.0/42) + 13.0/33 *sin(63*t + 47.0/33) + 5.0/28 *sin(64*t + 73.0/19) + 8.0/21 *
  sin(65*t + 79.0/27) + 17.0/42 *sin(66*t + 10.0/3) + 18.0/29 *sin(67*t + 13.0/7) + 8.0/47 *sin(69*t + 23.0/35) + 22.0/27 *
  sin(71*t + 82.0/21) + 19.0/37 *sin(73*t + 72.0/25) + 1.0/12 *sin(75*t + 116.0/35) + 8.0/13 *sin(76*t + 19.0/11) + 19.0/25 *
  sin(80*t + 83.0/28) - 2134.0/29)*theta(3*PI -t)*theta(t +PI))*theta(sqrt(sgn(sin(t/2)))));
}
